[{"path":"https://smartiing.github.io/seekr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 seekr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://smartiing.github.io/seekr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sacha Martingay. Author, maintainer.","code":""},{"path":"https://smartiing.github.io/seekr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Martingay S (2025). seekr: Extract Matching Lines Matching Files. R package version 0.0.0.9000, https://github.com/smartiing/seekr.","code":"@Manual{,   title = {seekr: Extract Matching Lines from Matching Files},   author = {Sacha Martingay},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/smartiing/seekr}, }"},{"path":"https://smartiing.github.io/seekr/index.html","id":"seekr","dir":"","previous_headings":"","what":"Extract Matching Lines from Matching Files","title":"Extract Matching Lines from Matching Files","text":"seekr R package designed help search specific patterns within text files.","code":""},{"path":"https://smartiing.github.io/seekr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Matching Lines from Matching Files","text":"can install development version seekr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"smartiing/seekr\")"},{"path":"https://smartiing.github.io/seekr/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Extract Matching Lines from Matching Files","text":"seekr provides two main functions: seek(): Search pattern files within specified directory. seek_in(): Search pattern given list files. function returns tibble following columns: file: Index file list. path: Path file. line: Line number pattern found. content: Content matching line. match: first match found line. matches: matches found line.","code":""},{"path":"https://smartiing.github.io/seekr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extract Matching Lines from Matching Files","text":"","code":"# Search for lines containing 'particular words' in csv files within the specified folder tmp_mtcars = tempfile(\"01mtcars\", fileext = \".csv\") tmp_iris = tempfile(\"02iris\", fileext = \".csv\")  write.csv(mtcars, tmp_mtcars) write.csv(iris, tmp_iris)  found = seekr::seek(   pattern = \"(?i)toyota|honda|setosa\",    path = tempdir(),    filter = \"\\\\.csv$\" )    print(found) #> # A tibble: 53 × 6 #>     file path                       line match  matches   content                #>    <int> <chr>                     <int> <chr>  <list>    <chr>                  #>  1     1 /01mtcars566c3efb3d0f.csv    20 Honda  <chr [1]> \"\\\"Honda Civic\\\",30.4… #>  2     1 /01mtcars566c3efb3d0f.csv    21 Toyota <chr [1]> \"\\\"Toyota Corolla\\\",3… #>  3     1 /01mtcars566c3efb3d0f.csv    22 Toyota <chr [1]> \"\\\"Toyota Corona\\\",21… #>  4     2 /02iris566c3d4e698b.csv       2 setosa <chr [1]> \"\\\"1\\\",5.1,3.5,1.4,0.… #>  5     2 /02iris566c3d4e698b.csv       3 setosa <chr [1]> \"\\\"2\\\",4.9,3,1.4,0.2,… #>  6     2 /02iris566c3d4e698b.csv       4 setosa <chr [1]> \"\\\"3\\\",4.7,3.2,1.3,0.… #>  7     2 /02iris566c3d4e698b.csv       5 setosa <chr [1]> \"\\\"4\\\",4.6,3.1,1.5,0.… #>  8     2 /02iris566c3d4e698b.csv       6 setosa <chr [1]> \"\\\"5\\\",5,3.6,1.4,0.2,… #>  9     2 /02iris566c3d4e698b.csv       7 setosa <chr [1]> \"\\\"6\\\",5.4,3.9,1.7,0.… #> 10     2 /02iris566c3d4e698b.csv       8 setosa <chr [1]> \"\\\"7\\\",4.6,3.4,1.4,0.… #> # ℹ 43 more rows    unlink(c(tmp_mtcars, tmp_iris))"},{"path":"https://smartiing.github.io/seekr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Extract Matching Lines from Matching Files","text":"package licensed MIT License.","code":""},{"path":"https://smartiing.github.io/seekr/reference/add_matches_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Match Columns to a Data Frame — add_matches_columns","title":"Add Match Columns to a Data Frame — add_matches_columns","text":"Adds two new columns data frame lines: one matches found line, one first match .","code":""},{"path":"https://smartiing.github.io/seekr/reference/add_matches_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Match Columns to a Data Frame — add_matches_columns","text":"","code":"add_matches_columns(df, pattern)"},{"path":"https://smartiing.github.io/seekr/reference/add_matches_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Match Columns to a Data Frame — add_matches_columns","text":"df data frame created create_file_df(). pattern Perl-compatible regular expression used extract matches line.","code":""},{"path":"https://smartiing.github.io/seekr/reference/add_matches_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Match Columns to a Data Frame — add_matches_columns","text":"data frame two added columns: matches: list-column matches per line. match: character vector first match line.","code":""},{"path":"https://smartiing.github.io/seekr/reference/add_matches_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Match Columns to a Data Frame — add_matches_columns","text":"Matching performed gregexpr(), matches extracted using regmatches(). line multiple matches, first stored match.","code":""},{"path":"https://smartiing.github.io/seekr/reference/create_file_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert File Content to Data Frame — create_file_df","title":"Convert File Content to Data Frame — create_file_df","text":"Converts lines single file data frame metadata file index, line number, content. Handles empty unreadable files gracefully.","code":""},{"path":"https://smartiing.github.io/seekr/reference/create_file_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert File Content to Data Frame — create_file_df","text":"","code":"create_file_df(file_number, path, file_content)"},{"path":"https://smartiing.github.io/seekr/reference/create_file_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert File Content to Data Frame — create_file_df","text":"file_number integer. index file original file list. path character string. path file. file_content character vector file lines, NA_character_.","code":""},{"path":"https://smartiing.github.io/seekr/reference/create_file_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert File Content to Data Frame — create_file_df","text":"tibble one row per line, containing: file: Integer index file list. path: Path file. line: Line number within file. content: Content matching line.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Files by Name Pattern — filter_matching_files","title":"Filter Files by Name Pattern — filter_matching_files","text":"Filters character vector file paths using Perl-compatible regular expression. files match, informative error message displayed.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Files by Name Pattern — filter_matching_files","text":"","code":"filter_matching_files(files, filter)"},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Files by Name Pattern — filter_matching_files","text":"files character vector file paths filter. filter Perl-compatible regular expression applied file paths.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Files by Name Pattern — filter_matching_files","text":"character vector file paths match pattern.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Lines Matching a Pattern — filter_matching_lines","title":"Filter Lines Matching a Pattern — filter_matching_lines","text":"Filters rows data frame keep line content matches given regular expression.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Lines Matching a Pattern — filter_matching_lines","text":"","code":"filter_matching_lines(df, pattern)"},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Lines Matching a Pattern — filter_matching_lines","text":"df data frame created create_file_df(). pattern Perl-compatible regular expression used filter lines.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Lines Matching a Pattern — filter_matching_lines","text":"data frame containing rows content matches pattern.","code":""},{"path":"https://smartiing.github.io/seekr/reference/filter_matching_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Lines Matching a Pattern — filter_matching_lines","text":"function re-encodes content lines UTF-8 removes lines match pattern. Encoding issues replaced byte representations.","code":""},{"path":"https://smartiing.github.io/seekr/reference/list_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List All Files in a Directory — list_files","title":"List All Files in a Directory — list_files","text":"Lists files specified directory using base::list.files(), options include subdirectories hidden files. files found, provides informative error messages.","code":""},{"path":"https://smartiing.github.io/seekr/reference/list_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List All Files in a Directory — list_files","text":"","code":"list_files(path, recursive, all.files)"},{"path":"https://smartiing.github.io/seekr/reference/list_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List All Files in a Directory — list_files","text":"path character vector full path names; default     corresponds working directory, getwd().  Tilde     expansion (see path.expand) performed.  Missing     values ignored.  Elements marked encoding     converted native encoding (fails, considered     non-existent). recursive logical.  listing recurse directories? .files logical value.  FALSE,     names visible files returned (following Unix-style visibility,     files whose name start dot).  TRUE,     file names returned.","code":""},{"path":"https://smartiing.github.io/seekr/reference/list_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List All Files in a Directory — list_files","text":"character vector normalized file paths.","code":""},{"path":"https://smartiing.github.io/seekr/reference/parse_files_to_dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Files and Return Content as Data Frames — parse_files_to_dfs","title":"Read Files and Return Content as Data Frames — parse_files_to_dfs","text":"Reads list files returns list data frames, one per file, containing content file line.","code":""},{"path":"https://smartiing.github.io/seekr/reference/parse_files_to_dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Files and Return Content as Data Frames — parse_files_to_dfs","text":"","code":"parse_files_to_dfs(files, warn, n)"},{"path":"https://smartiing.github.io/seekr/reference/parse_files_to_dfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Files and Return Content as Data Frames — parse_files_to_dfs","text":"files character vector file paths read. warn logical.  Warn text file missing final      embedded s file. n integer.  (maximal) number lines     read.  Negative values indicate one read end     input connection.","code":""},{"path":"https://smartiing.github.io/seekr/reference/parse_files_to_dfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Files and Return Content as Data Frames — parse_files_to_dfs","text":"list data frames, representing content file. data frame includes columns file index, path, line number, content.","code":""},{"path":"https://smartiing.github.io/seekr/reference/readLines_safe.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe File Reading — readLines_safe","title":"Safe File Reading — readLines_safe","text":"Reads file using base::readLines() error handling. error occurs (e.g., file unreadable), returns NULL instead stopping execution.","code":""},{"path":"https://smartiing.github.io/seekr/reference/readLines_safe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe File Reading — readLines_safe","text":"","code":"readLines_safe(con, warn, n)"},{"path":"https://smartiing.github.io/seekr/reference/readLines_safe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe File Reading — readLines_safe","text":"con connection object character string. warn logical.  Warn text file missing final      embedded s file. n integer.  (maximal) number lines     read.  Negative values indicate one read end     input connection.","code":""},{"path":"https://smartiing.github.io/seekr/reference/readLines_safe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe File Reading — readLines_safe","text":"character vector lines file, NULL reading fails.","code":""},{"path":"https://smartiing.github.io/seekr/reference/seek.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Matching Lines from Matching Files — seek","title":"Extract Matching Lines from Matching Files — seek","text":"Searches lines matching regular expression pattern set files. seek(), files discovered within directory (recursively ), optionally filtered using path pattern. seek_in(), files provided directly user.","code":""},{"path":"https://smartiing.github.io/seekr/reference/seek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Matching Lines from Matching Files — seek","text":"","code":"seek(   pattern,   path = \".\",   filter = NULL,   recursive = FALSE,   all.files = FALSE,   n = -1L,   warn = FALSE,   relative_path = TRUE )  seek_in(pattern, files, n = -1L, warn = FALSE)  process_files_lines(files, pattern, warn, n, relative_path)"},{"path":"https://smartiing.github.io/seekr/reference/seek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Matching Lines from Matching Files — seek","text":"pattern string. Perl-compatible regular expression used filter lines files. path character vector full path names; default     corresponds working directory, getwd().  Tilde     expansion (see path.expand) performed.  Missing     values ignored.  Elements marked encoding     converted native encoding (fails, considered     non-existent). filter Optional. Perl-compatible regular expression used filter file names reading . NULL, files considered. recursive logical.  listing recurse directories? .files logical value.  FALSE,     names visible files returned (following Unix-style visibility,     files whose name start dot).  TRUE,     file names returned. n integer.  (maximal) number lines     read.  Negative values indicate one read end     input connection. warn logical.  Warn text file missing final      embedded s file. relative_path Logical. TRUE, returned paths made relative path argument. applies seek(). files character vector file paths used directly, instead searching directory. used seek_in().","code":""},{"path":"https://smartiing.github.io/seekr/reference/seek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Matching Lines from Matching Files — seek","text":"tibble one row per matching line, containing: file: Integer index file list. path: Path file. line: Line number within file. match: first matched substring. matches: matched substrings. content: Content matching line.","code":""},{"path":"https://smartiing.github.io/seekr/reference/seek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Matching Lines from Matching Files — seek","text":"functions combine file listing (direct input), filtering, reading, pattern extraction single interface. especially useful searching codebases, configuration files, logs. search case-sensitive uses Perl-compatible regular expressions (PCRE).","code":""},{"path":"https://smartiing.github.io/seekr/reference/seek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Matching Lines from Matching Files — seek","text":"","code":"if (FALSE) { # \\dontrun{ # Find all function definitions in R files under current directory seek(\"[^\\\\s]+(?= = function\\\\()\", filter = \"\\\\.R$\", recursive = TRUE)  # Find all package loaded using `library() in a predefined list of files files = list.files(pattern = \"\\\\.R$\", recursive = TRUE) seek_in(\"(?<=library\\\\()[^\\\\)]+\", files) } # }"},{"path":"https://smartiing.github.io/seekr/reference/seekr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"seekr: Extract Matching Lines from Matching Files — seekr-package","title":"seekr: Extract Matching Lines from Matching Files — seekr-package","text":"Provides simple interface recursively list files directory, filter using regular expression, read contents, extract lines match user-defined pattern. package returns tibble containing matched lines, line numbers, file paths, corresponding matched substrings. Designed quick codebase exploration, log inspection, use case involving pattern-based file line filtering.","code":""},{"path":[]},{"path":"https://smartiing.github.io/seekr/reference/seekr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"seekr: Extract Matching Lines from Matching Files — seekr-package","text":"Maintainer: Sacha Martingay martingay.sacha@hotmail.com","code":""}]
